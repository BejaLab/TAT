
configfile: "config.yaml"

sources = [ "oceandna", "gtdb", "lanclos" ]

rule all:
    input:
        "output/gtdb.pdf",
        "output/phylophlan.pdf"

rule get_gtdb_metadata:
    output:
        "analysis/metadata/gtdb.tsv"
    params:
        url = config['gtdb']['metadata']
    shell:
        "curl -sL {params.url} | gzip -cd > {output}"

rule get_gtdb_tree:
    output:
        "analysis/metadata/gtdb_tree.nwk"
    params:
        url = config['gtdb']['tree']
    shell:
        "curl -sL {params.url} > {output}"

rule gtdb_clade:
    input:
        "analysis/metadata/gtdb_tree.nwk"
    output:
        clade = "analysis/metadata/gtdb_clade.nwk",
        tips = "analysis/metadata/gtdb_representatives.txt"
    params:
        taxon = config['taxon']
    conda:
        "envs/r.yaml"
    script:
        "scripts/get_gtdbtk_clade.R"

rule get_oceandna_metadata:
    output:
        "analysis/metadata/oceandna.tsv"
    params:
        url = config['oceandna']['metadata'],
        file = config['oceandna']['metadata_file']
    shell:
        "curl -sL {params.url} | tar xfz - {params.file} -O > {output}"

rule dload_lanclos_metadata:
    output:
        "analysis/metadata/lanclos.xlsx"
    params:
        url = config['lanclos']['metadata']
    shell:
        "curl -sL {params.url} > {output}"

rule dload_oceandna_repr:
    output:
        "analysis/oceandna_data/"
    params:
        url = ""
    shell:
        "wget -O {output} {params.url}"

rule get_lanclos_metadata:
    input:
        "analysis/metadata/lanclos.xlsx"
    output:
        "analysis/metadata/lanclos.tsv"
    conda:
        "envs/xlsx2csv.yaml"
    shell:
        "xlsx2csv -s 1 -d tab {input} {output}"

rule get_lanclos_genomes:
    output:
        "analysis/metadata/lanclos_genomes.zip"
    params:
        url = config['lanclos']['genomes']
    shell:
        "curl -sL {params.url} > {output}"

checkpoint filter_gtdb:
    input:
        tsv = "analysis/metadata/gtdb.tsv",
        txt = "analysis/metadata/gtdb_representatives.txt"
    output:
        tsv = "analysis/metadata/gtdb_filtered.tsv",
        dir = directory("analysis/gtdb_json/")
    params:
        genera = config['genera']
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/filter_gtdb.py"

def chosen_diamond(w):
    if w.source == "oceandna":
        tsv = checkpoints.filter_oceandna.get().output[0]
    elif w.source == "lanclos":
        tsv = checkpoints.filter_lanclos.get().output[0]
    elif w.source == "gtdb":
        tsv = checkpoints.filter_gtdb.get().output['tsv']
    with tsv.open() as file:
        accs = [ line.split()[0] for line in file ]
    return expand("analysis/diamond/{source}/{acc}.outfmt6", source = w.source, acc = accs)

def chosen_faa_IIIa(w):
    files = []
    ext = 'cds' if w and w.ext == 'cds' else 'faa'
    with checkpoints.filter_oceandna.get().output[0].open() as file:
        accs = [ line.split()[0] for line in file ]
        files += expand("analysis/proteins/oceandna/{acc}.{ext}", acc = accs, ext = ext)
    with checkpoints.filter_lanclos.get().output[0].open() as file:
        accs = [ line.split()[0] for line in file ]
        files += expand("analysis/proteins/lanclos/{acc}.{ext}", acc = accs, ext = ext)
    with checkpoints.filter_gtdb.get().output['tsv'].open() as file:
        accs = []
        genera = list(config['genera'].values()) + list(config['outgroup'].values())
        for line in file:
            acc, taxonomy, biosamples = line.split('\t')
            for genus in genera:
                if f"{genus};" in taxonomy:
                    accs.append(acc)
        files += expand("analysis/proteins/gtdb/{acc}.{ext}", acc = accs, ext = ext)
    return files

rule cat_queries:
    input:
        TAT = "analysis/TAT/ingroup.faa",
        PR = "input/PR.faa"
    output:
        "analysis/diamond/queries.faa"
    conda:
        "envs/tools.yaml"
    shell:
        "(seqkit replace -p ^ -r TAT_ {input.TAT}; seqkit replace -p ^ -r PR_ {input.PR}) > {output}"

rule diamond:
    input:
        query = "analysis/diamond/queries.faa",
        db = "analysis/proteins/{source}/{acc}.faa"
    output:
        "analysis/diamond/{source}/{acc}.outfmt6"
    conda:
        "envs/diamond.yaml"
    shell:
        "diamond blastp -k 0 --sensitive --db {input.db} --query {input.query} --out {output} --outfmt 6"

rule prodigal:
    input:
        "analysis/genomes/{source}/{acc}.fna"
    output:
        faa = "analysis/proteins/{source}/{acc}.faa",
        cds = "analysis/proteins/{source}/{acc}.cds",
        gff = "analysis/proteins/{source}/{acc}.gff"
    shadow:
        "minimal"
    conda:
        "envs/prodigal.yaml"
    shell:
        "prodigal -i {input} -a {output.faa} -d {output.cds} -f gff -o {output.gff}"

rule collect_diamond:
    input:
        chosen_diamond
    output:
        "analysis/diamond_collect/{source}.tsv"
    params:
        evalue = 1e-10,
        pident = 48
    conda:
        "envs/r.yaml"
    script:
        "scripts/collect_diamond.R"

rule get_TAT:
    input:
        tsv = expand("analysis/diamond_collect/{source}.tsv", source = sources),
        fasta = chosen_faa_IIIa
    output:
        "analysis/TAT/genomes.{ext}"
    conda:
        "envs/tools.yaml"
    shell:
        "grep -h TAT {input.tsv} | parallel --colsep \\\\t seqkit grep -p {{3}} analysis/proteins/*/{{1}}.{wildcards.ext} \| seqkit replace -p ^ -r {{1}}@ > {output}"

rule translate_ingroup:
    input:
        "input/ingroup.fna"
    output:
        "analysis/TAT/ingroup.faa"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit translate -o {output} {input}"

rule cat_TAT:
    input:
        "analysis/TAT/ingroup.faa",
        "analysis/TAT/genomes.cdhit"
    output:
        "analysis/TAT/TwR.faa"
    params:
        m = 220
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit seq -im {params.m} {input} | seqkit rmdup | seqkit rmdup -s -o {output}"

rule cdhit_TAT:
    input:
        "analysis/TAT/genomes.faa"
    output:
        faa = "analysis/TAT/genomes.cdhit",
        clstr = "analysis/TAT/genomes.cdhit.clstr"
    params:
        c = 0.98
    conda:
        "envs/cdhit.yaml"
    shell:
        "cd-hit -i {input} -o {output.faa} -c {params.c} -d 0"

rule mafft_TAT:
    input:
        "analysis/TAT/TwR.faa"
    output:
        "analysis/TAT/TwR.mafft"
    conda:
        "envs/mafft.yaml"
    shell:
        "mafft --reorder --localpair --maxiterate 1000 {input} > {output}"

rule mafft_rhodopsins:
    input:
        "analysis/TAT/TwR.faa",
        "input/outgroups.faa"
    output:
        "analysis/TAT/rhodopsins.mafft"
    conda:
        "envs/mafft.yaml"
    shell:
        "cat {input} | mafft --reorder --localpair --maxiterate 1000 - > {output}"

rule cat_cds:
    input:
        "input/ingroup.fna",
        "analysis/TAT/genomes.cds"
    output:
        "analysis/TAT/TwR.cds"
    shell:
        "cat {input} > {output}"

rule backtrans:
    input:
        mafft = "analysis/TAT/TwR.mafft",
        codons = "analysis/TAT/TwR.cds"
    output:
        "analysis/TAT/TwR.mafft.cds"
    conda:
        "envs/trimal.yaml"
    shell:
        "trimal -splitbystopcodon -backtrans {input.codons} -in {input.mafft} -out {output}"

rule codon_trim:
    input:
        "analysis/TAT/TwR.mafft.cds"
    output:
        "analysis/TAT/TwR.mafft.cds.trim_unfixednames"
    params:
        gt = 0.5
    conda:
        "envs/trimal.yaml"
    shell:
        "trimal -in {input} -out {output} -gt {params.gt}"

rule fix_names:
    input:
        "analysis/TAT/TwR.mafft.cds.trim_unfixednames"
    output:
        "analysis/TAT/TwR.mafft.cds.trim"
    shell:
        "tr @ _ < {input} > {output}"

rule codon_iqtree:
    input:
        "analysis/TAT/TwR.mafft.cds.trim"
    output:
        "analysis/TAT/TwR.mafft.cds.trim.treefile"
    params:
        seed = 123,
        B = 1000
    threads:
        4
    conda:
        "envs/iqtree.yaml"
    shell:
        "iqtree2 -seed {params.seed} -s {input} -st CODON -B {params.B} -T {threads} -redo"

rule root_digger:
    input:
        fasta = "analysis/TAT/TwR.mafft.cds.trim",
        tree  = "analysis/TAT/TwR.mafft.cds.trim.raxml.bestTree",
        model = "analysis/TAT/TwR.mafft.cds.trim.raxml.bestModel"
    output:
        "analysis/TAT/root_digger/TwR.mafft.cds.trim.raxml.bestTree.lwr.tree",
        "analysis/TAT/root_digger/TwR.mafft.cds.trim.raxml.bestTree.rooted.tree"
    params:
        dir = "analysis/TAT/root_digger"
    threads:
        30
    shadow:
        "minimal"
    log:
        "analysis/TAT/root_digger/TwR.mafft.cds.trim.raxml.bestTree.log"
    shell:
        """
        rd --msa {input.fasta} --tree {input.tree} --exhaustive --threads {threads} &> {log}
        mv {input.tree}.lwr.tree {input.tree}.rooted.tree {params.dir}/
        """

rule raxml_evaluate:
    input:
        fasta  = "analysis/TAT/TwR.mafft.cds.trim",
        iqtree = "analysis/TAT/TwR.mafft.cds.trim.treefile"
    output:
        "analysis/TAT/TwR.mafft.cds.trim.raxml.bestTree",
        "analysis/TAT/TwR.mafft.cds.trim.raxml.bestModel"
    params:
        seed = 123,
        model = "GTR+G"
    log:
        "analysis/TAT/TwR.mafft.cds.trim.raxml.log"
    conda:
        "envs/raxml-ng.yaml"
    shell:
        "raxml-ng --redo --evaluate --msa {input.fasta} --tree {input.iqtree} --model {params.model} --seed {params.seed} &> {log}"

rule trimal_rhodopsins:
    input:
        "analysis/TAT/rhodopsins.mafft"
    output:
        "analysis/TAT/rhodopsins.trimal"
    params:
        gt = 0.1
    conda:
        "envs/trimal.yaml"
    shell:
        "trimal -in {input} -out {output} -gt {params.gt}"

rule iqtree_rhodopsins:
    input:
        "analysis/TAT/rhodopsins.trimal"
    output:
        "analysis/TAT/rhodopsins.trimal.treefile"
    params:
        seed = 123
    conda:
        "envs/iqtree.yaml"
    threads:
        4
    shell:
        "iqtree2 -s {input} -redo --alrt 1000 -B 1000 --seed {params.seed} -T {threads}"

checkpoint filter_lanclos:
    input:
        "analysis/metadata/lanclos.tsv"
    output:
        "analysis/metadata/lanclos_filtered.tsv"
    params:
        genera = config['genera']
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/filter_lanclos.py"

checkpoint filter_oceandna:
    input:
        oceandna = "analysis/metadata/oceandna.tsv",
        gtdb = "analysis/metadata/gtdb_filtered.tsv"
    output:
        "analysis/metadata/oceandna_filtered.tsv"
    params:
        genera = config['genera']
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/filter_oceandna.py"

rule get_gtdb_genome:
    input:
        "analysis/gtdb_json/"
    output:
        "analysis/genomes/gtdb/{acc}.fna"
    params:
        json = "analysis/gtdb_json/{acc}_assembly.json"
    resources:
        ncbi = 1
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/get_assembly.py"

rule get_oceandna_genome:
    input:
        "data/oceandna"
    output:
        "analysis/genomes/oceandna/{acc}.fna"
    shell:
        "find -L {input} -name {wildcards.acc}.fa.gz | xargs gzip -cd > {output}"

rule get_lanclos_genome:
    input:
        "analysis/metadata/lanclos_genomes.zip"
    output:
        "analysis/genomes/lanclos/{acc}.fna"
    shell:
        "unzip -p {input} {wildcards.acc}.fna > {output}"

rule gtdb_tree:
    input:
        genes = "analysis/diamond_collect/gtdb.tsv",
        lanclos = "analysis/metadata/lanclos.tsv",
        gtdb = "analysis/metadata/gtdb_filtered.tsv",
        tree = "analysis/metadata/gtdb_clade.nwk"
    output:
        "output/gtdb.pdf"
    params:
        dist = 0.1
    conda:
        "envs/r.yaml"
    script:
        "scripts/plot_gtdb.R"

rule phylophlan_input:
    input:
        chosen_faa_IIIa
    output:
        directory("analysis/IIIa")
    shell:
        "mkdir {output} && cp {input} {output}/"

# NB: usearch not under conda
rule phylophlan:
    input:
        work_dir = "analysis/IIIa",
        cfg = "metadata/phylophlan.cfg",
        maas = "metadata/phylophlan.tsv"
    output:
        treefile = "analysis/IIIa_phylophlan/IIIa.tre.treefile"
    conda:
        "envs/phylophlan.yaml"
    threads:
        workflow.cores
    shell:
        "phylophlan -i {input.work_dir} -t a -f {input.cfg} --diversity low --subsample full -d phylophlan --nproc {threads} --output_folder analysis --verbose --maas {input.maas}"

rule phylophlan_tree:
    input:
        tree = "analysis/IIIa_phylophlan/IIIa.tre.treefile",
        genes = expand("analysis/diamond_collect/{source}.tsv", source = sources),
        gtdb = "analysis/metadata/gtdb_filtered.tsv",
        lanclos = "analysis/metadata/lanclos.tsv",
        oceandna = "analysis/metadata/oceandna_filtered.tsv"
    output:
        "output/phylophlan.pdf"
    params:
        genera = config['genera'],
        outgroup = config['outgroup'],
        show_labels = "LSUCC|HIMB114|IMCC9063"
    conda:
        "envs/r.yaml"
    script:
        "scripts/plot_phylophlan.R"
